{
  
    
        "post0": {
            "title": "JuliaでBit全探索を書く時にはdigitsを使うと便利。",
            "content": "const N = 4 for i in 0:2^N - 1 pettern = digits(i, base=2, pad=N) println(pettern) end . [0, 0, 0, 0] [1, 0, 0, 0] [0, 1, 0, 0] [1, 1, 0, 0] [0, 0, 1, 0] [1, 0, 1, 0] [0, 1, 1, 0] [1, 1, 1, 0] [0, 0, 0, 1] [1, 0, 0, 1] [0, 1, 0, 1] [1, 1, 0, 1] [0, 0, 1, 1] [1, 0, 1, 1] [0, 1, 1, 1] [1, 1, 1, 1] . あとはこの各パターンについて 1 -&gt; True 0 -&gt; False と見做して処理を行えば良いです。",
            "url": "https://abap34.github.io/my-website/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2020/12/18/digits.html",
            "relUrl": "/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2020/12/18/digits.html",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "JuliaでUnionFindを実装する",
            "content": "fieldの値が更新されているのにもかかわらず、structとなっていますが、fieldがmutableなオブジェクトであればmutable structにせずとも中身が更新できます。 また、rootは経路圧縮を、uniteは統合する処理を行う破壊的な関数なので、Juliaの慣習にしたがって!をつけています struct UnionFind par :: Array{Int, 1} size :: Array{Int, 1} UnionFind(N) = new(collect(1:N), collect(1:N)) end function root!(uf::UnionFind, x::Int) if uf.par[x] == x return x else return uf.par[x] = root(uf, uf.par[x]) end end function issame(uf::UnionFind, x::Int, y::Int) return root(uf, x) == root(uf, y) end function unite!(uf::UnionFind, x::Int, y::Int) x = root(uf, x) y = root(uf, y) (x == y) &amp;&amp; (return true) if (uf.size[x] &lt; uf.size[y]) uf.par[x] = y uf.size[y] += uf.size[x] else uf.par[y] = x uf.size[x] += uf.size[y] end return true end . unite! (generic function with 1 method) . uf = UnionFind(5) . UnionFind([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) . unite(uf, 2, 3) unite(uf, 1, 4) unite(uf, 1, 5) . true . root(uf, 2) . 3 . [https://atcoder.jp/contests/atc001/submissions/18284457] .",
            "url": "https://abap34.github.io/my-website/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2020/12/18/UnionFind.html",
            "relUrl": "/%E7%AB%B6%E6%8A%80%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/2020/12/18/UnionFind.html",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "fastpages with Julia and plotly",
            "content": "using Plots; plotly() . Plots.PlotlyBackend() . # from (http://www.cas.cmc.osaka-u.ac.jp/~paoon/misc/julia/post/trouble-plots-package/) f(x,y) = (3x + y^2) * abs(sin(x) + cos(y)) x = 0:0.1:20 y = 0:0.1:10 z = [f(i,j) for i in x, j in y]&#39; plot(x, y, z, st=:surface) . &lt;!DOCTYPE html&gt; Plots.jl . .",
            "url": "https://abap34.github.io/my-website/jupyter/2020/08/09/julia-plot-test.html",
            "relUrl": "/jupyter/2020/08/09/julia-plot-test.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "fastpagesを使って簡単にブログを作る",
            "content": "fastpagesとは . fast.ai が開発したブログプラットフォーム(?)です。 . 大きな特徴として、 「Jupyter Notebookをそのまま記事にできる」ということが挙げられます。 . (もちろんMarkdownも使えますし、なんと.docxファイル(要はword)も使えます。すごい。) . htmlやcssなどの知識を必要とせずに簡単に技術記事を書けるのはとても魅力的です。 . もちろん　Web完全理解者　の方は、自分なりにカスタマイズもできます。 . 使ってみよう . 早速使ってみます。 . (作業時間は10分もあればお釣りがくるレベルです) . 公式には、 fastpagesのリポジトリのREADME.mdのSetup Instructionsの項目を参照してください。 . レポジトリを作る。 . まずは本体を置くGitHubでレポジトリを作ります。 . このリンク から新しいレポジトリを作ります。 . この時にレポジトリの名前を {githubのユーザー名}.github.ioにしないように注意してください。 . すると、1分もしないうちに自動でセットアップの手順を記したPRがBotから飛んできます。次はこれに従って設定していきます。 . 秘密鍵と公開鍵を作る . 生成 . まず、 https://8gwifi.org/sshfunctions.jsp に飛んで、秘密鍵と公開鍵を生成します。 (もちろん手元で生成してもいいですが、 PRにはこのサイトを使用するように言われます。) . SSH-Keygen Online Algorithm　はRSA, RSA Key Sizeは4096を選択します。 . Passphraseは何も入力しなくて大丈夫です。 . generate-SSH-Keysで、　秘密鍵(画面上)と、　公開鍵(画面下)が生成されます。 . . 秘密鍵の設定 . 次に、レポジトリの、 Settings =&gt; Secretsから、秘密鍵を登録します。 . 右上の、new secretをクリックして、先ほどの先ほど生成した秘密鍵を入力していきます。 . Nameには、SSH_DEPLOY_KEY 、 . そして、Valueに先ほど生成した秘密鍵(Private Key)をコピペします。 . (最初と最後の . --BEGIN RSA PRIVATE KEY-- 、 . --END RSA PRIVATE KEY-- も忘れずにコピペしましょう。) . 公開鍵の設定 . 次に、レポジトリの、 Settings =&gt; Deploy keys から、公開鍵を登録します。 . Add deploy key をクリックして、 生成した公開鍵(Public Key)をコピペします。 . Titleは何を設定しても問題ないので、公序良俗に反さない名前をつけておきましょう。 . 最後に、 Allow write accessにチェックを入れて、 Add keyをクリックします。 . ここまでやれば設定は完了です。 . 飛んできたPRをマージしてください。 . すごい . しばらく待つと、 https://{あなたのGitHubのユーザー名}.github.io/{作ったレポジトリの名前} . に、Webサイトが構築されます！ . また、masterにpushするたびにサイトが自動で更新されます！ . .",
            "url": "https://abap34.github.io/my-website/tutorial/2020/08/09/how_to_setup.html",
            "relUrl": "/tutorial/2020/08/09/how_to_setup.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://abap34.github.io/my-website/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://abap34.github.io/my-website/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://abap34.github.io/my-website/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://abap34.github.io/my-website/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}