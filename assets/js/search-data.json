{
  
    
        "post0": {
            "title": "JuliaでBit全探索を書く時にはdigitsを使うと便利。",
            "content": "const N = 4 for i in 0:2^N - 1 pettern = digits(i, base=2, pad=N) println(pettern) end . [0, 0, 0, 0] [1, 0, 0, 0] [0, 1, 0, 0] [1, 1, 0, 0] [0, 0, 1, 0] [1, 0, 1, 0] [0, 1, 1, 0] [1, 1, 1, 0] [0, 0, 0, 1] [1, 0, 0, 1] [0, 1, 0, 1] [1, 1, 0, 1] [0, 0, 1, 1] [1, 0, 1, 1] [0, 1, 1, 1] [1, 1, 1, 1] . あとはこの各パターンについて 1 -&gt; True 0 -&gt; False と見做して処理を行えば良いです。",
            "url": "https://abap34.github.io/my-website/atcoder/2020/12/18/digits.html",
            "relUrl": "/atcoder/2020/12/18/digits.html",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Juliaで@benchmarkの結果を文字列として得る",
            "content": "using BenchmarkTools . result = @benchmark 1 + 1 println(result) . Trial(0.035 ns) . (´・ω・｀) function get_str(result::BenchmarkTools.Trial) io = IOBuffer() show(io, &quot;text/plain&quot;, result) return String(take!(io)) end result = @benchmark 1 + 1 println(get_str(result)) . BenchmarkTools.Trial: memory estimate: 0 bytes allocs estimate: 0 -- minimum time: 0.035 ns (0.00% GC) median time: 0.038 ns (0.00% GC) mean time: 0.040 ns (0.00% GC) maximum time: 15.705 ns (0.00% GC) -- samples: 10000 evals/sample: 1000 . どう考えてもスマートじゃないけど動いてるのでヨシ",
            "url": "https://abap34.github.io/my-website/tips/2020/12/18/benchmark.html",
            "relUrl": "/tips/2020/12/18/benchmark.html",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Title",
            "content": "",
            "url": "https://abap34.github.io/my-website/2020/12/18/Untitled.html",
            "relUrl": "/2020/12/18/Untitled.html",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "JuliaでUnionFindを実装する",
            "content": "fieldの値が更新されているのにもかかわらず、structとなっていますが、fieldがmutableなオブジェクトであればmutable structにせずとも中身が更新できます。 また、rootは経路圧縮を、uniteは統合する処理を行う破壊的な関数なので、Juliaの慣習にしたがって!をつけています struct UnionFind par :: Array{Int, 1} size :: Array{Int, 1} UnionFind(N) = new(collect(1:N), collect(1:N)) end function root!(uf::UnionFind, x::Int) if uf.par[x] == x return x else return uf.par[x] = root(uf, uf.par[x]) end end function issame(uf::UnionFind, x::Int, y::Int) return root(uf, x) == root(uf, y) end function unite!(uf::UnionFind, x::Int, y::Int) x = root(uf, x) y = root(uf, y) (x == y) &amp;&amp; (return true) if (uf.size[x] &lt; uf.size[y]) uf.par[x] = y uf.size[y] += uf.size[x] else uf.par[y] = x uf.size[x] += uf.size[y] end return true end . unite! (generic function with 1 method) . uf = UnionFind(5) . UnionFind([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) . unite(uf, 2, 3) unite(uf, 1, 4) unite(uf, 1, 5) . true . root(uf, 2) . 3 . [https://atcoder.jp/contests/atc001/submissions/18284457] .",
            "url": "https://abap34.github.io/my-website/atcoder/2020/12/18/UnionFind.html",
            "relUrl": "/atcoder/2020/12/18/UnionFind.html",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "DeepShibaの開発再開にあたって現状を確認しようと思う",
            "content": "DeepShiba&#12392;&#12399; . もともとゼロから作るDeepLearning3をJuliaに移植しよう！というところから始まった自作のDLフレームワークです。 . 現状は計算グラフの構築 + 自動微分etc.....というところまでで、まだ本丸(NNに関連する機能)は未実装です(え？) . 最近は僕がkaggleをはじめとした機械学習コンペにハマってしまった影響で開発が滞っていたのですが、再開しようかなぁという気持ちになったので、現状を確認していこうと思います。 . &#26368;&#21021;&#12398;&#26368;&#21021; . using DeepShiba . DeepShibaは、ShibaObject.Variableの型の変数を流すことで、通常のJuliaの関数を高速に微分することができます。 . f(x) = 3x^2 + 2x + 1 . f (generic function with 1 method) . この関数を微分します。 $$ f(x) = 3x^2 + 2x + 1 $$ なので、 $$ f&#39;(x) = 6x + 2 $$ です。実際に計算させてみます。 . variableを使うことでShibaObject.Variableを作ります。これは演算時に計算グラフを構築します。 . x = variable(2, name=&quot;x&quot;) x . {DeepShiba.ShibaObject.Variable}: x : data: 2 User-Defined . y = f(x) y . {DeepShiba.ShibaObject.Variable}: data: 17 creator: DeepShiba.Add . ShibaObject.Variableとの演算は, ShibaObject.Variableを返します。したがって、yもShibaObject.Variableです。 . backward!(y) x . {DeepShiba.ShibaObject.Variable}: x : data: 2 grad: 14 User-Defined . backward!(y)を使用することで、逆伝播が行われ、自動的にxの勾配が求められます。 . plot(y) . また、計算グラフの可視化機能も備えています。内部的にはgraphvizを使っています。ここでは、自動微分を利用して勾配降下法を実装してみます。 f(x) = 5x^2 + (0.2 * cos(x * 10)) x = variable(2.0, name=&quot;x&quot;) lr = 1e-3 iters = 10000 log_interval = 1000 for i in 1:iters ((i - 1) % log_interval == 0) &amp;&amp; (println(&quot;$i: $(x.data)&quot;)) y = f(x) cleargrad!(x) backward!(y) x.data -= lr * x.grad.data end . 1: 2.0 1001: 0.18954951933991088 2001: 0.18954942670340436 3001: 0.18954942670339894 4001: 0.18954942670339894 5001: 0.18954942670339894 6001: 0.18954942670339894 7001: 0.18954942670339894 8001: 0.18954942670339894 9001: 0.18954942670339894 . using Plots; plotly() . Plots.plot(-1:0.01:1, f.(-1:0.01:1)) . &lt;!DOCTYPE html&gt; Plots.jl . . 無事に最小値付近の値を求めることができました。 &#20170;&#24460;&#12398;&#20104;&#23450; . そもそもDeepShibaの開発は、broadcast周りへの対応が詰まって若干モチベが下がったとことから止まりました。 . なのでまず未完成のbroadcastの記事を完成させて、開発を再開していきたいと思います(いつまで書いてるんですか????????????) .",
            "url": "https://abap34.github.io/my-website/ml/2020/12/18/DeepShiba_20201219.html",
            "relUrl": "/ml/2020/12/18/DeepShiba_20201219.html",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "fastpages with Julia and plotly",
            "content": "using Plots; plotly() . Plots.PlotlyBackend() . # from (http://www.cas.cmc.osaka-u.ac.jp/~paoon/misc/julia/post/trouble-plots-package/) f(x,y) = (3x + y^2) * abs(sin(x) + cos(y)) x = 0:0.1:20 y = 0:0.1:10 z = [f(i,j) for i in x, j in y]&#39; plot(x, y, z, st=:surface) . &lt;!DOCTYPE html&gt; Plots.jl . .",
            "url": "https://abap34.github.io/my-website/test/2020/08/09/julia-plot-test.html",
            "relUrl": "/test/2020/08/09/julia-plot-test.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "fastpagesを使って簡単にブログを作る",
            "content": "fastpagesとは . fast.ai が開発したブログプラットフォーム(?)です。 . 大きな特徴として、 「Jupyter Notebookをそのまま記事にできる」ということが挙げられます。 . (もちろんMarkdownも使えますし、なんと.docxファイル(要はword)も使えます。すごい。) . htmlやcssなどの知識を必要とせずに簡単に技術記事を書けるのはとても魅力的です。 . もちろん　Web完全理解者　の方は、自分なりにカスタマイズもできます。 . 使ってみよう . 早速使ってみます。 . (作業時間は10分もあればお釣りがくるレベルです) . 公式には、 fastpagesのリポジトリのREADME.mdのSetup Instructionsの項目を参照してください。 . レポジトリを作る。 . まずは本体を置くGitHubでレポジトリを作ります。 . このリンク から新しいレポジトリを作ります。 . この時にレポジトリの名前を {githubのユーザー名}.github.ioにしないように注意してください。 . すると、1分もしないうちに自動でセットアップの手順を記したPRがBotから飛んできます。次はこれに従って設定していきます。 . 秘密鍵と公開鍵を作る . 生成 . まず、 https://8gwifi.org/sshfunctions.jsp に飛んで、秘密鍵と公開鍵を生成します。 (もちろん手元で生成してもいいですが、 PRにはこのサイトを使用するように言われます。) . SSH-Keygen Online Algorithm　はRSA, RSA Key Sizeは4096を選択します。 . Passphraseは何も入力しなくて大丈夫です。 . generate-SSH-Keysで、　秘密鍵(画面上)と、　公開鍵(画面下)が生成されます。 . . 秘密鍵の設定 . 次に、レポジトリの、 Settings =&gt; Secretsから、秘密鍵を登録します。 . 右上の、new secretをクリックして、先ほどの先ほど生成した秘密鍵を入力していきます。 . Nameには、SSH_DEPLOY_KEY 、 . そして、Valueに先ほど生成した秘密鍵(Private Key)をコピペします。 . (最初と最後の . --BEGIN RSA PRIVATE KEY-- 、 . --END RSA PRIVATE KEY-- も忘れずにコピペしましょう。) . 公開鍵の設定 . 次に、レポジトリの、 Settings =&gt; Deploy keys から、公開鍵を登録します。 . Add deploy key をクリックして、 生成した公開鍵(Public Key)をコピペします。 . Titleは何を設定しても問題ないので、公序良俗に反さない名前をつけておきましょう。 . 最後に、 Allow write accessにチェックを入れて、 Add keyをクリックします。 . ここまでやれば設定は完了です。 . 飛んできたPRをマージしてください。 . すごい . しばらく待つと、 https://{あなたのGitHubのユーザー名}.github.io/{作ったレポジトリの名前} . に、Webサイトが構築されます！ . また、masterにpushするたびにサイトが自動で更新されます！ . .",
            "url": "https://abap34.github.io/my-website/tutorial/2020/08/09/how_to_setup.html",
            "relUrl": "/tutorial/2020/08/09/how_to_setup.html",
            "date": " • Aug 9, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://abap34.github.io/my-website/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". abap34です。愛知県で高校生をしています。 主に機械学習関連のことをガチャガチャして遊んでいます。 気軽に話しかけてください！ .",
          "url": "https://abap34.github.io/my-website/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://abap34.github.io/my-website/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}